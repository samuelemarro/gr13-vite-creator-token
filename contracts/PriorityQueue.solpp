// SPDX-License-Identifier: MIT
/// @title Memory-only PriorityQueue implementation
/// @author Plasma Team (adapted by Samuele Marro)
pragma soliditypp ^0.8.0;

// Adapted from https://github.com/omgnetwork/plasma-contracts/blob/v2.0.0/plasma_framework/contracts/src/framework/utils/PriorityQueue.sol


/**
 * @title PriorityQueue
 * @dev Min-heap priority queue implementation
 */
library PriorityQueue {
    struct Queue {
        Pair[] heapList;
        uint256 currentSize;
    }

    struct Pair {
        uint128 key;
        address data;
    }

    function newQueue(uint256 _maxSize) internal pure returns (Queue memory) {
        Queue memory queue;
        queue.heapList = new Pair[](_maxSize);
        queue.currentSize = 0;
        return queue;
    }

    /**
     * @notice Gets num of elements in the queue
     */
    function size(Queue memory self) internal pure returns (uint256) {
        return self.currentSize;
    }

    function maxSize(Queue memory self) internal pure returns (uint256) {
        return self.heapList.length;
    }

    /**
     * @notice Gets all elements in the queue
     */
    function heapList(Queue memory self) internal pure returns (Pair[] memory) {
        return self.heapList;
    }

    /**
     * @notice Inserts an element into the queue by the framework
     * @dev Does not perform deduplication
     */
    function push(Queue memory self, Pair memory _element) internal pure {
        require(self.currentSize < self.heapList.length, "Queue is full");
        self.heapList[self.currentSize] = _element;
        self.currentSize++;
        percUp(self, self.currentSize);
    }

    /**
     * @notice Deletes the smallest element from the queue by the framework
     * @dev Fails when queue is empty
     * @return The smallest element in the priority queue
     */
    function pop(Queue memory self) internal pure returns (Pair memory) {
        require(self.currentSize > 0, "Queue is empty");
        Pair memory retVal = self.heapList[1];
        self.heapList[1] = self.heapList[self.currentSize];
        delete self.heapList[self.currentSize];
        self.currentSize--;
        percDown(self, 1);
        return retVal;
    }

    /**
     * @notice Returns the smallest element from the queue
     * @dev Fails when queue is empty
     * @return The smallest element in the priority queue
     */
    function peek(Queue memory self) internal pure returns (Pair memory) {
        require(self.currentSize > 0, "Queue is empty");
        return self.heapList[1];
    }

    function percUp(Queue memory self, uint256 pointer) private pure {
        uint256 i = pointer;
        uint256 j = i;
        Pair memory newVal = self.heapList[i];
        while (newVal.key < self.heapList[i / 2].key) {
            self.heapList[i] = self.heapList[i / 2];
            i = i / 2;
        }
        if (i != j) {
            self.heapList[i] = newVal;
        }
    }

    function percDown(Queue memory self, uint256 pointer) private pure {
        uint256 i = pointer;
        uint256 j = i;
        Pair memory newVal = self.heapList[i];
        uint256 mc = minChild(self, i);
        while (mc <= self.currentSize && newVal.key > self.heapList[mc].key) {
            self.heapList[i] = self.heapList[mc];
            i = mc;
            mc = minChild(self, i);
        }
        if (i != j) {
            self.heapList[i] = newVal;
        }
    }

    function minChild(Queue memory self, uint256 i) private pure returns (uint256) {
        if (2 * i + 1 > self.currentSize) {
            return 2 * i;
        } else {
            if (self.heapList[2 * i].key < self.heapList[2 * i + 1].key) {
                return 2 * i;
            } else {
                return 2 * i + 1;
            }
        }
    }
}